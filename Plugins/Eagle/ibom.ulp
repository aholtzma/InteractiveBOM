output("pcbdata.txt","wt")

board(B) {
/*********************************************/
// BOM entries
    printf("\"bom\": {\n");


    printf("\t\"F\": [\n");
    B.elements(E){
        // Mirror is used to signify if the parts on the top or bottom of the board. 
        // mirror = 0 -> top
        // mirror = 1 -> bottom
        if(!E.mirror){
            printf("\t\t[\"%s\" , \"%s\" , [\"%s\"]],\n", E.value, E.package.name, E.name);
        }
    }
    printf("\t],\n");

    printf("\t\"B\": [\n");
    B.elements(E){
        if(E.mirror){
            printf("\t\t[\"%s\" , \"%s\" , [\"%s\"]],\n", E.value, E.package.name, E.name);
        }
    }
    printf("\t],\n");


    printf("\t\"both\": [\n");
    B.elements(E){
        printf("\t\t[\"%s\" , \"%s\" , [\"%s\"]],\n", E.value, E.package.name, E.name);
    }
    printf("\t],\n");
    printf("},\n");
/*********************************************/

/*********************************************/
// Dimension entries
    printf("\"edges\": [\n");

    B.wires(W){
        if(W.layer == LAYER_DIMENSION){
            // "end": [159.9311,113.89359999999999],
            //"start": [137.0711,96.11359999999999],
            //"type": "segment",
            //"width": 0.15
            printf("\t{\n");
            printf("\t\t\"end\": [%5.5f,%5.5f],\n",u2mm(W.x2),u2mm(W.y2));
            printf("\t\t\"start\": [%5.5f,%5.5f],\n",u2mm(W.x1),u2mm(W.y1));
            printf("\t\t\"type\": \"segment\",\n");
            printf("\t\t\"width\": \"%5.5f\"\n", u2mm(W.width));
            printf("\t},\n");
        }
    }
    printf("],\n");
/*********************************************/


/*********************************************/
// Bounding Box
    printf("\"edges_bbox\": {\n");
    printf("\t\t\"maxx\": \"%5.5f\",\n", u2mm(B.area.x2));
    printf("\t\t\"maxy\": \"%5.5f\",\n", u2mm(B.area.y2));
    printf("\t\t\"minx\": \"%5.5f\",\n", u2mm(B.area.x1));
    printf("\t\t\"miny\": \"%5.5f\"\n", u2mm(B.area.y1));
    printf("},\n");
/*********************************************/

/*********************************************/
// Metadata entries

    printf("\"metadata\": {\n");

    string company = "";
    B.attributes(A){
        if( (A.name == "COMPANY") )
        {
            company = A.value;
        }
    }

    string revision = "";
    B.attributes(A){
        if( (A.name == "REV") || (A.name == "REVISION"))
        {
            revision = A.value;
        }
    }

    string a[];
    int n = strsplit(a, B.name, '/');


    printf("\t\t\"company\": \"%s\",\n", company);
    printf("\t\t\"date\": \"%s\",\n", t2string(time(), "Uyyyy-MM-dd hh:mm:ss"));
    printf("\t\t\"revision\": \"%s\",\n", revision);
    printf("\t\t\"title\": \"%s\"\n", a[n-1]);
    printf("},\n");

/*********************************************/

/*********************************************/
// Silkscreen entries
            /*
    printf("\"silkscreen\": {\n");

    printf("\t\"B\": [\n");
    B.texts(T){
        if(T.layer == LAYER_BPLACE){


            // Remove newlines and replace with \n.
            for (int i = 0; s[i]; ++i)
            {
                sum += s[i]; // sums up the characters in 
            }
        


            printf("\t{\n");
            printf("\t\t\"attr\": [],\n");
            printf("\t\t\"height\":  \"%5.5f\",\n",u2mm(T.size));
            printf("\t\t\"horiz_justify\": -1,\n");
            printf("\t\t\"pos\": [%5.5f,%5.5f],\n",u2mm(T.x), u2mm(T.y));
            printf("\t\t\"text\": \"%s\",\n",T.value);
            printf("\t\t\"thickness\": %5.5f,\n",u2mm(T.ratio)*u2mm(T.size));
            printf("\t\t\"width\": %5.5f,\n",u2mm(T.size));
            printf("\t},\n");
        }
    }
    printf("\t],\n");
    printf("},\n");
    */
    printf("\"silkscreen\": {\n");

    printf("\t\"B\": [\n");
    // Extract the text. Going all the way to wires since this can use the segment interface
    // of the rendering
    B.texts(T){
        if(T.layer == LAYER_BPLACE){
            T.wires(W){
                printf("\t\t{\n");
                printf("\t\t\t\"end\": [%5.5f,%5.5f],\n",u2mm(W.x2),u2mm(W.y2));
                printf("\t\t\t\"start\": [%5.5f,%5.5f],\n",u2mm(W.x1),u2mm(W.y1));
                printf("\t\t\t\"type\": \"segment\",\n");
                printf("\t\t\t\"width\": \"%5.5f\"\n", u2mm(W.width));
                printf("\t\t},\n");
            }
        }
    }
    // Extract segments from the packages on the bottom layer. Use the segment 
    // interface for rendering text
    B.elements(E){
        // Mirror is used to signify if the parts on the top or bottom of the board. 
        // mirror = 0 -> top
        // mirror = 1 -> bottom
        if(E.mirror){
            E.package.wires(W){
                {
                    printf("\t\t{\n");
                    printf("\t\t\t\"end\": [%5.5f,%5.5f],\n",u2mm(W.x2),u2mm(W.y2));
                    printf("\t\t\t\"start\": [%5.5f,%5.5f],\n",u2mm(W.x1),u2mm(W.y1));
                    printf("\t\t\t\"type\": \"segment\",\n");
                    printf("\t\t\t\"width\": \"%5.5f\"\n", u2mm(W.width));
                    printf("\t\t},\n");
                }
            }
        }
    }
    // Now extract the rectangles for an object.
    //TODO: Make the rectangle interface api similar to that of segment. 
    //      Something along the lines for vertex points so everything else can be calculated
    /*
    B.elements(E){
        // Mirror is used to signify if the parts on the top or bottom of the board.
        // mirror = 0 -> top
        // mirror = 1 -> bottom
        if(E.mirror){
            E.package.rectangles(R){
                    printf("\t\t{\n");
                    printf("\t\t\t\"angle\": [%5.5f],\n",R.angle);
                    printf("\t\t\t\"polygons\": [[\n");
                    printf("\t\t\t\t[%5.5f,%5.5f],\n",u2mm(R.x1), u2mm(R.y1));
                    printf("\t\t\t\t[%5.5f,%5.5f],\n",u2mm(R.x2), u2mm(R.y1));
                    printf("\t\t\t\t[%5.5f,%5.5f],\n",u2mm(R.x2), u2mm(R.y2));
                    printf("\t\t\t\t[%5.5f,%5.5f],\n",u2mm(R.x1), u2mm(R.y2));
                    printf("\t\t\t]],\n");
                    int center_x = (R.x1+R.x2)/2;
                    int center_y = (R.y1+R.y2)/2;
                    printf("\t\t\t\"pos\": [%5.5f,%5.5f],\n",u2mm(R.x2), u2mm(R.y2));
                    printf("\t\t\t\"type\": \"polygon\",\n");
                    printf("\t\t},\n");
                
            }
        }
    }
    

    B.rectangles(R){
        // Mirror is used to signify if the parts on the top or bottom of the board.
        // mirror = 0 -> top
        // mirror = 1 -> bottom
        {
            printf("\t\t{\n");
            printf("\t\t\t\"angle\": [%5.5f],\n",R.angle);
            printf("\t\t\t\"polygons\": [[\n");
            printf("\t\t\t\t[%5.5f,%5.5f],\n",u2mm(R.x1), u2mm(R.y1));
            printf("\t\t\t\t[%5.5f,%5.5f],\n",u2mm(R.x2), u2mm(R.y1));
            printf("\t\t\t\t[%5.5f,%5.5f],\n",u2mm(R.x2), u2mm(R.y2));
            printf("\t\t\t\t[%5.5f,%5.5f],\n",u2mm(R.x1), u2mm(R.y2));
            printf("\t\t\t]],\n");
            int center_x = (R.x1+R.x2)/2;
            int center_y = (R.y1+R.y2)/2;
            printf("\t\t\t\"pos\": [%5.5f,%5.5f],\n",u2mm(R.x2), u2mm(R.y2));
            printf("\t\t\t\"type\": \"polygon\",\n");
            printf("\t\t},\n");
        
        }
    }
    */
    printf("\t],\n");

    printf("\t\"F\": [\n");
    B.texts(T){
        if(T.layer == LAYER_TPLACE){
            T.wires(W){
                printf("\t\t{\n");
                printf("\t\t\t\"end\": [%5.5f,%5.5f],\n",u2mm(W.x2),u2mm(W.y2));
                printf("\t\t\t\"start\": [%5.5f,%5.5f],\n",u2mm(W.x1),u2mm(W.y1));
                printf("\t\t\t\"type\": \"segment\",\n");
                printf("\t\t\t\"width\": \"%5.5f\"\n", u2mm(W.width));
                printf("\t\t},\n");
            }
        }
    }

    B.elements(E){
        // Mirror is used to signify if the parts on the top or bottom of the board. 
        // mirror = 0 -> top
        // mirror = 1 -> bottom
        if(!E.mirror){
            E.package.wires(W){
                if(W.layer == LAYER_TPLACE){
                    printf("\t\t{\n");
                    printf("\t\t\t\"end\": [%5.5f,%5.5f],\n",u2mm(W.x2),u2mm(W.y2));
                    printf("\t\t\t\"start\": [%5.5f,%5.5f],\n",u2mm(W.x1),u2mm(W.y1));
                    printf("\t\t\t\"type\": \"segment\",\n");
                    printf("\t\t\t\"width\": \"%5.5f\"\n", u2mm(W.width));
                    printf("\t\t},\n");
                }
            }
        }
    }

    printf("\t],\n");

    printf("},\n");
/*********************************************/

}