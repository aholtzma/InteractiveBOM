output("pcbdata.txt","wt")

board(B) {
/*********************************************/
// BOM entries
    printf("\"bom\": {\n");


    printf("\t\"F\": [\n");
    B.elements(E){
        // Mirror is used to signify if the parts on the top or bottom of the board. 
        // mirror = 0 -> top
        // mirror = 1 -> bottom
        if(!E.mirror){
            printf("\t\t[\"%s\" , \"%s\" , [\"%s\"]],\n", E.value, E.package.name, E.name);
        }
    }
    printf("\t],\n");

    printf("\t\"B\": [\n");
    B.elements(E){
        if(E.mirror){
            printf("\t\t[\"%s\" , \"%s\" , [\"%s\"]],\n", E.value, E.package.name, E.name);
        }
    }
    printf("\t],\n");


    printf("\t\"both\": [\n");
    B.elements(E){
        printf("\t\t[\"%s\" , \"%s\" , [\"%s\"]],\n", E.value, E.package.name, E.name);
    }
    printf("\t],\n");
    printf("},\n");
/*********************************************/

/*********************************************/
// Dimension entries
    printf("\"edges\": [\n");

    B.wires(W){
        if(W.layer == LAYER_DIMENSION){
            // "end": [159.9311,113.89359999999999],
            //"start": [137.0711,96.11359999999999],
            //"type": "segment",
            //"width": 0.15
            printf("\t{\n");
            printf("\t\t\"end\": [%5.5f,%5.5f],\n",u2mm(W.x2),u2mm(W.y2));
            printf("\t\t\"start\": [%5.5f,%5.5f],\n",u2mm(W.x1),u2mm(W.y1));
            printf("\t\t\"type\": \"segment\",\n");
            printf("\t\t\"width\": \"%5.5f\"\n", u2mm(W.width));
            printf("\t},\n");
        }
    }
    printf("],\n");
/*********************************************/


/*********************************************/
// Bounding Box
    printf("\"edges_bbox\": {\n");
    printf("\t\t\"maxx\": \"%5.5f\",\n", u2mm(B.area.x1));
    printf("\t\t\"maxy\": \"%5.5f\",\n", u2mm(B.area.y1));
    printf("\t\t\"minx\": \"%5.5f\",\n", u2mm(B.area.x2));
    printf("\t\t\"miny\": \"%5.5f\"\n", u2mm(B.area.y2));
    printf("},\n");
/*********************************************/

/*********************************************/
// Metadata entries

    printf("\"metadata\": {\n");

    string company = "";
    B.attributes(A){
        if( (A.name == "COMPANY") )
        {
            company = A.value;
        }
    }

    string revision = "";
    B.attributes(A){
        if( (A.name == "REV") || (A.name == "REVISION"))
        {
            revision = A.value;
        }
    }

    string a[];
    int n = strsplit(a, B.name, '/');


    printf("\t\t\"company\": \"%s\",\n", company);
    printf("\t\t\"date\": \"%s\",\n", t2string(time(), "Uyyyy-MM-dd hh:mm:ss"));
    printf("\t\t\"revision\": \"%s\",\n", revision);
    printf("\t\t\"title\": \"%s\"\n", a[n-1]);
    printf("},\n");

/*********************************************/

/*********************************************/
// Silkscreen entries
    printf("\"silkscreen\": {\n");

    printf("\t\"B\": [\n");
    // Extract the text. Going all the way to wires since this can use the segment interface
    // of the rendering
    B.texts(T){
        if(T.layer == LAYER_BPLACE){
            T.wires(W){
                printf("\t\t{\n");
                printf("\t\t\t\"end\": [%5.5f,%5.5f],\n",u2mm(W.x2),u2mm(W.y2));
                printf("\t\t\t\"start\": [%5.5f,%5.5f],\n",u2mm(W.x1),u2mm(W.y1));
                printf("\t\t\t\"type\": \"segment\",\n");
                printf("\t\t\t\"width\": \"%5.5f\"\n", u2mm(W.width));
                printf("\t\t},\n");
            }
        }
    }
    // Extract segments from the packages on the bottom layer. Use the segment 
    // interface for rendering text
    B.elements(E){
        // Mirror is used to signify if the parts on the top or bottom of the board. 
        // mirror = 0 -> top
        // mirror = 1 -> bottom
        if(E.mirror){
            E.package.wires(W){
                {
                    printf("\t\t{\n");
                    printf("\t\t\t\"end\": [%5.5f,%5.5f],\n",u2mm(W.x2),u2mm(W.y2));
                    printf("\t\t\t\"start\": [%5.5f,%5.5f],\n",u2mm(W.x1),u2mm(W.y1));
                    printf("\t\t\t\"type\": \"segment\",\n");
                    printf("\t\t\t\"width\": \"%5.5f\"\n", u2mm(W.width));
                    printf("\t\t},\n");
                }
            }
        }
    }
    // TODO: This is not working.
    // Now extract the rectangles for an object.
    //TODO: Make the rectangle interface api similar to that of segment. 
    //      Something along the lines for vertex points so everything else can be calculated
    /*
    B.elements(E){
        // Mirror is used to signify if the parts on the top or bottom of the board.
        // mirror = 0 -> top
        // mirror = 1 -> bottom
        if(E.mirror){
            E.package.rectangles(R){
                    printf("\t\t{\n");
                    printf("\t\t\t\"angle\": [%5.5f],\n",R.angle);
                    printf("\t\t\t\"polygons\": [[\n");
                    printf("\t\t\t\t[%5.5f,%5.5f],\n",u2mm(R.x1), u2mm(R.y1));
                    printf("\t\t\t\t[%5.5f,%5.5f],\n",u2mm(R.x2), u2mm(R.y1));
                    printf("\t\t\t\t[%5.5f,%5.5f],\n",u2mm(R.x2), u2mm(R.y2));
                    printf("\t\t\t\t[%5.5f,%5.5f],\n",u2mm(R.x1), u2mm(R.y2));
                    printf("\t\t\t]],\n");
                    int center_x = (R.x1+R.x2)/2;
                    int center_y = (R.y1+R.y2)/2;
                    printf("\t\t\t\"pos\": [%5.5f,%5.5f],\n",u2mm(R.x2), u2mm(R.y2));
                    printf("\t\t\t\"type\": \"polygon\",\n");
                    printf("\t\t},\n");
                
            }
        }
    }
    

    B.rectangles(R){
        // Mirror is used to signify if the parts on the top or bottom of the board.
        // mirror = 0 -> top
        // mirror = 1 -> bottom
        {
            printf("\t\t{\n");
            printf("\t\t\t\"angle\": [%5.5f],\n",R.angle);
            printf("\t\t\t\"polygons\": [[\n");
            printf("\t\t\t\t[%5.5f,%5.5f],\n",u2mm(R.x1), u2mm(R.y1));
            printf("\t\t\t\t[%5.5f,%5.5f],\n",u2mm(R.x2), u2mm(R.y1));
            printf("\t\t\t\t[%5.5f,%5.5f],\n",u2mm(R.x2), u2mm(R.y2));
            printf("\t\t\t\t[%5.5f,%5.5f],\n",u2mm(R.x1), u2mm(R.y2));
            printf("\t\t\t]],\n");
            int center_x = (R.x1+R.x2)/2;
            int center_y = (R.y1+R.y2)/2;
            printf("\t\t\t\"pos\": [%5.5f,%5.5f],\n",u2mm(R.x2), u2mm(R.y2));
            printf("\t\t\t\"type\": \"polygon\",\n");
            printf("\t\t},\n");
        
        }
    }
    */
    printf("\t],\n");

    printf("\t\"F\": [\n");
    B.texts(T){
        if(T.layer == LAYER_TPLACE){
            T.wires(W){
                printf("\t\t{\n");
                printf("\t\t\t\"end\": [%5.5f,%5.5f],\n",u2mm(W.x2),u2mm(W.y2));
                printf("\t\t\t\"start\": [%5.5f,%5.5f],\n",u2mm(W.x1),u2mm(W.y1));
                printf("\t\t\t\"type\": \"segment\",\n");
                printf("\t\t\t\"width\": \"%5.5f\"\n", u2mm(W.width));
                printf("\t\t},\n");
            }
        }
    }

    B.elements(E){
        // Mirror is used to signify if the parts on the top or bottom of the board. 
        // mirror = 0 -> top
        // mirror = 1 -> bottom
        if(!E.mirror){
            E.package.wires(W){
                // Only take wires on the tplace layer
                if(W.layer == LAYER_TPLACE){
                    printf("\t\t{\n");
                    printf("\t\t\t\"end\": [%5.5f,%5.5f],\n",u2mm(W.x2),u2mm(W.y2));
                    printf("\t\t\t\"start\": [%5.5f,%5.5f],\n",u2mm(W.x1),u2mm(W.y1));
                    printf("\t\t\t\"type\": \"segment\",\n");
                    printf("\t\t\t\"width\": \"%5.5f\"\n", u2mm(W.width));
                    printf("\t\t},\n");
                }
            }
        }
    }

    printf("\t],\n");

    printf("},\n");
/*********************************************/


/*********************************************/
// Silkscreen entries

    printf("\"modules\": {\n");

    B.elements(E){
        printf("\t\"%s\": {\n",E.name);


        printf("\t\t\"bbox\":{\n");



        int diff_x = (E.package.area.x2 - E.package.area.x1)/2;
        int diff_y = (E.package.area.y2 - E.package.area.y1)/2;

        printf("\t\t\t\"pos\":[%5.5f,%5.5f],\n",u2mm(E.x - diff_x/2), u2mm(E.y - diff_y/2));
        printf("\t\t\t\"size\":[%5.5f,%5.5f],\n",u2mm(diff_x), u2mm(diff_y));
        printf("\t\t},\n");
        
        printf("\t\t\"center\":[%5.5f,%5.5f],\n",u2mm(E.x), u2mm(E.y));

        printf("\t\t\"drawings\":[],\n");

        if(!E.mirror)
        {
            printf("\t\t\"layer\":[\"F\"],\n");
        }
        else
        {
            printf("\t\t\"layer\":[\"B\"],\n");
        }
        
        printf("\t\t\"pads\":[\n");
        E.package.contacts(C)
        {
            printf("\t\t\t{\n");
            //TODO: Figure out why this does not work
            if(C.smd)
            {
                printf("\t\t\t\t\"angle\": %5.5f,\n",C.smd.angle);
            }
            else if(C.pad)
            {
                printf("\t\t\t\t\"angle\": %5.5f,\n",C.pad.angle);
            }

            // Checks if the part is smd or through hole.
            if(C.smd)
            {
                if(!E.mirror)
                {
                    printf("\t\t\t\t\"layers\":[\"F\"],\n");
                }
                else
                {
                    printf("\t\t\t\t\"layers\":[\"B\"],\n");
                }
            }
            else if(C.pad)
            {
               printf("\t\t\t\t\"layers\":[\"F\", \"B\"],\n");
            }



            printf("\t\t\t\t\"offset\": [0.0,0.0],\n");
            printf("\t\t\t\t\"pos\": [%5.5f,%5.5f],\n",u2mm(C.x), u2mm(C.y));
            printf("\t\t\t\t\"shape\": \"rect\",\n");
            
            if(C.smd)
            {
                printf("\t\t\t\t\"size\": [%5.5f,%5.5f],\n",u2mm(C.smd.dx), u2mm(C.smd.dy));
                printf("\t\t\t\t\"type\": \"smd\"\n");
            }
            else if(C.pad)
            {
                printf("\t\t\t\t\"size\": [%5.5f,%5.5f],\n",1.0, 1.0);
                printf("\t\t\t\t\"type\": \"smd\"\n");
            }
            
            printf("\t\t\t},\n");
        }
        printf("\t\t],\n");

        printf("\t\t\"ref\":\"%s\"\n",E.name);

        printf("\t},\n");
    }

    printf("},");

/*********************************************/
}